package ru.geekbrains.domodel.controllers;

import lombok.AllArgsConstructor;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import ru.geekbrains.domodel.entities.Account;
import ru.geekbrains.domodel.entities.Meter;
import ru.geekbrains.domodel.entities.MeterData;
import ru.geekbrains.domodel.entities.constants.Roles;
import ru.geekbrains.domodel.services.api.AccountService;
import ru.geekbrains.domodel.services.api.MeterService;

import java.security.Principal;
import java.util.List;

/**
 * Контроллер счетчиков показаний
 */
@Controller
@RequiredArgsConstructor
@RequestMapping("/meters")
@Secured({Roles.ROLE_ADMIN, Roles.ROLE_USER})
public class MeterController {

    // Сервис счетчиков
    private final MeterService meterService;

    // Сервис уккаунтов
    private final AccountService accountService;

    @GetMapping("")
    public String getMetersPage(@PathVariable String accountId, Model model, Principal principal) {
        Account account = accountService.getAccountById(Long.valueOf(accountId));
        model.addAttribute("account", account);
        model.addAttribute("meters", account.getMeters());
        model.addAttribute("meterDatas", meterService.getAllDataByMeters(account.getMeters()));
        return "meters/meters";
    }

    @GetMapping("/{id}")
    public String meterPage(@PathVariable String id, Model model) {
        Meter meter = meterService.getMeter(Long.valueOf(id));
        model.addAttribute("meter", meter);
        model.addAttribute("account", meter.getAccount());

        model.addAttribute("currentMeterData", meterService.getCurrentMeterDataByMeter(meter).orElse(null));
        model.addAttribute("preMeterData", meterService.getPreviousMeterDataByMeter(meter).orElse(null));

        model.addAttribute("meterDatas", meterService.getAllMeterDataByMeter(meter));
        return "meters/meterPage";
    }

    @PostMapping("/submit")
    public String submitData(@PathVariable String accountId, MeterData meterData) {
        meterData.setAutogenerated(false);
        meterService.submitMeterData(meterData);
        return "redirect:/"+ accountId +"/meters/";
    }

    @GetMapping("/add")
    public String getAddPage(Model model, Principal principal) {
        model.addAttribute("accounts", accountService.getAccountsByUserUserame(principal.getName()));
        return "meters/add";
    }

    @PostMapping("/add")
    public String addMeter(Meter meter) {
        meterService.save(meter);
        return "redirect:/meters";
    }
}
